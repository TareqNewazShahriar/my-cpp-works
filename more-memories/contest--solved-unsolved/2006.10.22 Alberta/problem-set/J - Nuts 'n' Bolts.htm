<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0062)http://online-judge.uva.es/contest/data/0160/problemset/J.html -->
<HTML><HEAD><TITLE>Nuts 'n' Bolts</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<STYLE type=text/css>.code {
	BORDER-RIGHT: #d1d7dc 1px solid; BORDER-TOP: #d1d7dc 1px solid; FONT-SIZE: 11px; BORDER-LEFT: #d1d7dc 1px solid; COLOR: #006600; BORDER-BOTTOM: #d1d7dc 1px solid; FONT-FAMILY: Courier, 'Courier New', sans-serif; BACKGROUND-COLOR: #fafafa
}
</STYLE>

<META content="MSHTML 6.00.2900.2180" name=GENERATOR></HEAD>
<BODY>
<CENTER>
<H2>Problem J</H2></CENTER>
<CENTER>
<H1>Nuts 'n' Bolts</H1></CENTER>One afternoon your cell phone rings; it's your 
cousin Jimmy.<BR>"Hi Cuz," he says, "I need your help and I need it fast. I'm in 
the middle of a programming contest and however hard I try, I can't get one 
problem to finish within the two second time limit."<BR>"Hmm... well..., isn't 
that a bit illegal?", you try to say to him. But he rattles on.<BR>"I just snook 
out of the contest room and managed to send you my code and the sample I/O by 
email", he continues without pausing. "I will check my mail again in an hour, so 
please make it work for me."<BR>"What about the problem description?", you 
ask.<BR>"Can't do", he says, "Zoroman the Head Judge is already on my tail, so I 
got to go. Bye, ... and, eh, thanks."<BR><BR>Are you going to help him? 
<H1>Jimmy's Code</H1>
<TABLE>
  <TBODY>
  <TR>
    <TD 
      class=code>#include&nbsp;&lt;stdio.h&gt;<BR>&nbsp;<BR>#define&nbsp;MAX_BOLTS&nbsp;500<BR>#define&nbsp;MAX_NUTS&nbsp;&nbsp;500<BR>&nbsp;<BR>/*&nbsp;global&nbsp;copy&nbsp;of&nbsp;the&nbsp;input&nbsp;data&nbsp;*/<BR>int&nbsp;nuts,bolts;<BR>int&nbsp;fits[MAX_BOLTS][MAX_NUTS];<BR><BR>void&nbsp;read_input_data(void){<BR>&nbsp;&nbsp;&nbsp;int&nbsp;n,b;<BR>&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;scanf("%d%d",&amp;bolts,&amp;nuts);<BR>&nbsp;&nbsp;&nbsp;for(b=0;b&lt;bolts;b++){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(n=0;n&lt;nuts;n++){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf("%d",&amp;fits[b][n]);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;}<BR><BR>/*&nbsp;data&nbsp;used&nbsp;to&nbsp;match&nbsp;nuts&nbsp;with&nbsp;bolts&nbsp;*/<BR>int&nbsp;nut_used[MAX_NUTS];<BR>int&nbsp;bestmatched;<BR><BR>void&nbsp;init_match(void){<BR>&nbsp;&nbsp;&nbsp;int&nbsp;n;<BR>&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;bestmatched=0;<BR>&nbsp;&nbsp;&nbsp;for(n=0;n&lt;nuts;n++)&nbsp;nut_used[n]=0;<BR>&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;<BR>void&nbsp;match_bolt(int&nbsp;boltno,&nbsp;int&nbsp;matched){<BR>&nbsp;&nbsp;&nbsp;int&nbsp;n;<BR>&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;if(boltno==bolts){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(matched&gt;bestmatched)&nbsp;bestmatched=matched;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;/*&nbsp;don't&nbsp;match&nbsp;this&nbsp;bolt&nbsp;*/<BR>&nbsp;&nbsp;&nbsp;match_bolt(boltno+1,matched);<BR>&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;/*&nbsp;match&nbsp;with&nbsp;all&nbsp;unused&nbsp;nuts&nbsp;that&nbsp;fit&nbsp;this&nbsp;bolt&nbsp;*/<BR>&nbsp;&nbsp;&nbsp;for(n=0;n&lt;nuts;n++)&nbsp;if(!nut_used[n]&nbsp;&amp;&amp;&nbsp;fits[boltno][n]){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nut_used[n]=1;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match_bolt(boltno+1,matched+1);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nut_used[n]=0;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;<BR>int&nbsp;main(){<BR>&nbsp;&nbsp;&nbsp;int&nbsp;cases,caseno;<BR>&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;scanf("%d",&amp;cases);<BR>&nbsp;&nbsp;&nbsp;for(caseno=1;caseno&lt;=cases;caseno++){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read_input_data();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init_match();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match_bolt(0,0);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Case&nbsp;%d:&nbsp;",caseno);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("a&nbsp;maximum&nbsp;of&nbsp;%d&nbsp;nuts&nbsp;and&nbsp;bolts&nbsp;",bestmatched);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("can&nbsp;be&nbsp;fitted&nbsp;together\n");<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;return&nbsp;0;<BR>&nbsp;&nbsp;&nbsp;}<BR><BR></TD></TR></TBODY></TABLE><BR>This 
is the code that Jimmy sent you by email.<BR>A plain-text version can be found 
<A 
href="http://online-judge.uva.es/contest/data/0160/problemset/jimmy.c">here</A>.<BR>
<H1>Sample Input</H1><PRE>2
3 4
0 0 1 0
1 1 0 1
0 0 1 0
5 5
1 0 0 1 1
1 1 0 0 0
1 0 0 0 0
0 1 1 0 0
0 0 0 0 1 
</PRE>
<H1>Sample Output</H1><PRE>Case 1: a maximum of 2 nuts and bolts can be fitted together
Case 2: a maximum of 5 nuts and bolts can be fitted together
</PRE>
<HR>
Problem Setter: Joachim Wulff, Special Thanks: Igor Naverniouk 
<HR>
PS. If you are a Pascal programmer and you don't understand C, then you're in 
trouble: in 2006 it was the last time that Pascal was allowed at the ICPC World 
Finals and other programming contests will probably follow soon. Better learn C 
or one of its derivatives! </BODY></HTML>
